// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  password      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  avatarFileKey String?  @unique

  // Stripe Connect
  stripeAccountId  String? @unique
  stripeCustomerId String? @unique
  chargesEnabled   Boolean @default(false)
  payoutsEnabled   Boolean @default(false)
  detailsSubmitted Boolean @default(false)

  sessions     Session[]
  offers       Offer[]
  transactions Transaction[]
  Message      Message[]
}

model Session {
  id           String  @id @default(cuid())
  userId       String
  user         User    @relation(fields: [userId], references: [id])
  ipAddress    String?
  userAgent    String?
  sessionToken String  @unique
}

model Offer {
  id           String   @id @default(cuid())
  title        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  description  String
  price        Float
  active       Boolean  @default(false) // Est-ce que l'offre est visible sur le site ?
  recurring    Boolean  @default(false) // Exemple : Si l'utilisateur vend un objet,
  //  il ne peut vendre cet objet qu'une seule fois.
  // Par conre, s'il rend un service, il peut le rendre plusieurs fois. Dans ce cas, l'application ne va pas supprimer l'offre après la première vente.
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  imageFileKey String?  @unique

  // Stripe Product/Price mapping (platform-side)
  stripeProductId String? @unique
  stripePriceId   String? @unique

  transactions Transaction[]
}

model Transaction {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  offerId   String
  offer     Offer    @relation(fields: [offerId], references: [id])

  userId   String
  user     User      @relation(fields: [userId], references: [id])
  messages Message[]

  stripePaymentIntentId   String? @unique
  stripeCheckoutSessionId String? @unique

  @@unique([offerId, userId])
}

model Message {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  content       String
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  price         Float?
  status        Int?        @default(0) // 0 = message, 10 = offre en attente, 20 = offre acceptée, 90 = offre refusée
}
